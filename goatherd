#!/bin/sh
# vim: ts=2 sw=2 sts=2:
#
# goatherd - A script managing goat installing, cleaning and virtually
#            everything.
#

# Be strict.
set -eu

readonly kROOT_DIR="$(dirname "$0")"
readonly kSOURCE_DIR="$kROOT_DIR/src"
readonly kSOURCE_GOAT="$kSOURCE_DIR/goat.sh"
readonly kGOAT_CONFIG="$kSOURCE_DIR/goat.config"
readonly kSOURCE_LEASH="$kSOURCE_DIR/leash.sh"
readonly kLEASH_CONFIG="$kSOURCE_DIR/leash.config"
readonly kSOURCE_GOATCD="$kSOURCE_DIR/goatcd.sh"
readonly kTARGET_DIR="$kROOT_DIR/target"
readonly kTARGET_GOAT="$kTARGET_DIR/goat.sh"
readonly kTARGET_LEASH="$kTARGET_DIR/leash.sh"
readonly kGOATHERD_CONFIG="$kROOT_DIR/goatherd.config"

# Load goatherd config.
# shellcheck source=./goatherd.config
. "$kGOATHERD_CONFIG"

# Print an error message and exit.
# Input:
# $1 -> The error message.
gh_abort() {
  printf "ERROR: %s\n" "$1"
  exit 1
}

# Print usage.
# TODO
gh_usage() {
  printf "usage\n"
  exit 1
}

# Input:
# $1 -> The base file where the second file is being injected.
# $2 -> The file to be injected.
# $3 -> The the output file.
# TODO
gh_inject() {
  inputfile="$1"
  injectedfile="$2"
  outputfile="$3"

  # -n -- Disables automatic line printing.
  #
  # -e ':head' -- Set up a label to jump to.  It's called 'head' because we use
  # it to print lines before the injection after the first empty line.
  #
  # -e 'p;/./n;/./b head' -- Print the line and if the current line is not
  # empty load the next one and jump to 'head'.
  #
  # -e "p;r $injectedfile" -- We get here if we didn't jump to head (the
  # current line is empty). Print the empty line and inject the content.
  #
  # -e ':tail' -- Set up a label called 'tail' to handle the remaining lines of
  # the input file.
  #
  # -e 'n;p;b tail' -- Load the next line, print it and jump to 'tail'.

  sed -n -e ':head' -e 'p;/./n;/./b head' -e "p;r $injectedfile" \
    -e ':tail' -e 'n;p;b tail' "$inputfile" > "$outputfile"
}

# TODO
gh_install_goatcd() {
  # Assume that the user don't want the goatcd if it is not defined in config.
  if [ -z "$kINSTALL_GOATCD" ]; then
    return 0
  elif [ "$kINSTALL_GOATCD" != 'YES' ]; then
    retrun 0
  fi

  # Check if the script ends with an empty line.
  sed -n '$p' "$kSOURCE_GOATCD" | grep -c "^$" >/dev/null 2>&1 && \
    printf "\n" >> "$kTARGET_LEASH"

  cat "$kSOURCE_GOATCD" >> "$kTARGET_LEASH"
}

# TODO
gh_target_leash() {
  # Check the source file existance.
  [ -f "$kSOURCE_LEASH" ] || gh_abort "$kSOURCE_LEASH is missing"
  [ -f "$kLEASH_CONFIG" ] || gh_abort "$kLEASH_CONFIG is missing"

  mkdir -p "$kTARGET_DIR"

  gh_inject "$kSOURCE_LEASH" "$kLEASH_CONFIG" "$kTARGET_LEASH"

  gh_install_goatcd
}

# TODO
gh_target_goat() {
  # Check the source file existance.
  [ -f "$kSOURCE_GOAT" ] || gh_abort "$kSOURCE_GOAT is missing"
  [ -f "$kGOAT_CONFIG" ] || gh_abort "$kGOAT_CONFIG is missing"

  mkdir -p "$kTARGET_DIR"

  gh_inject "$kSOURCE_GOAT" "$kGOAT_CONFIG" "$kTARGET_GOAT"
}

# TODO
gh_set_shellrc() {
  case "$kSHELL" in
    'bash')
      readonly kSHELLRC="$HOME/.bashrc"
      ;;
    *)
      gh_abort "failed to determine kSHELL's rc file; set kSHELLRC"\
        "in $kGOATHERD_CONFIG manually"
      ;;
  esac
}

# TODO
gh_install() {
  mkdir -p "$kINSTALLATION_DIR"

  cp "$kTARGET_GOAT" "$kINSTALLATION_DIR/$kGOAT"
  cp "$kTARGET_LEASH" "$kINSTALLATION_DIR/$kLEASH"

  set +u
  if [ ! "$kSHELLRC" ]; then
    set -u
    gh_set_shellrc
  fi
  set -u

  if [ ! -d "$(dirname "$kSHELLRC")" ]; then
    gh_abort "the kSHELLRC is set to '$kSHELLRC'; it doesn't make sense"
  fi

  # Check if the shell's rc file ends with an empty line.
  sed -n '$p' "$kSHELLRC" | grep -c "^$" >/dev/null 2>&1 && \
    printf "\n" >> "$kSHELLRC"

  printf "%s\n%s\n" \
    '# Added by goat (https://github.com/0mp/goat)' \
    ". $kINSTALLATION_DIR/$kLEASH" \
    >> "$kSHELLRC"
}

# TODO
gh_clean() {
  rm -r "$kTARGET_DIR" || :
}

# TODO
gh_remove() {
  rm "$kINSTALLATION_DIR/$kGOAT"
  rm "$kINSTALLATION_DIR/$kLEASH"
  rmdir "$kINSTALLATION_DIR" || : # Don't exit the script if rmdir fails.

  # TODO Ask the user if they want to save the shortcuts file.

  printf "goat and leash have been deleted\n"
  printf "%s might still exist\n" "$kINSTALLATION_DIR"
  printf "now remove goat's entry from your kSHELLRC\n"
}

# Run the main goatherd logic.
# Input:
# $@ -> All the command line arguments.
gh_run() {
  [ "$#" -ge 1 ] || gh_abort "provide at least one argument"
  readonly action="$1"

  case "$action" in
    'clean')
      gh_clean
      ;;
    'install')
      gh_install
      ;;
    'remove')
      gh_remove
      ;;
    'target')
      if [ "$#" -lt 2 ]; then
        gh_target_leash
        gh_target_goat
      elif [ "$2" = 'leash' ]; then
        gh_target_leash
      elif [ "$2" = 'goat' ]; then
        gh_target_goat
      else
        gh_usage
      fi
      ;;
    *)
      gh_usage
  esac
}

gh_run "$@"
